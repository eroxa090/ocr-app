import streamlit as st
from paddleocr import PaddleOCR
import re
import os
from datetime import datetime
from openai import OpenAI

# ------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OCR
# ------------------------------
ocr = PaddleOCR(lang='ru')  # OCR —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞

# ------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
# ------------------------------
# ‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ –∫–æ–Ω—Å–æ–ª–∏:
# export OPENAI_API_KEY="—Ç–≤–æ–π_–∫–ª—é—á"
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ------------------------------
# –§—É–Ω–∫—Ü–∏–∏
# ------------------------------
def extract_text(image_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ PaddleOCR"""
    result = ocr.ocr(image_path, cls=True)
    text = "\n".join([line[1][0] for line in result[0]])
    return text

def llm_postprocess(text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT (–ø–æ–ª—É—á–∞–µ–º JSON)"""
    prompt = f"""
    –í–æ—Ç —Ç–µ–∫—Å—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π OCR):
    {text}

    –ò–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
    - –§–ò–û
    - –î–∞—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥)
    - –°—É–º–º–∞
    - –í–∞–ª—é—Ç–∞

    –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON.
    """

    response = client.chat.completions.create(
        model="gpt-4o-mini",   # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-3.5-turbo
        messages=[{"role": "user", "content": prompt}]
    )

    return response.choices[0].message.content

def simple_extract_fields(text):
    """–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (—Ä–µ–≥—É–ª—è—Ä–∫–∏ –≤–º–µ—Å—Ç–æ GPT)"""
    data = {}

    # –î–∞—Ç–∞
    date_match = re.search(r"(\d{2}[./-]\d{2}[./-]\d{2,4})", text)
    if date_match:
        data["–î–∞—Ç–∞"] = date_match.group(1)

    # –°—É–º–º–∞
    sum_match = re.search(r"([\d\s]+[,.]?\d*)\s?(—Ç–≥|‚Ç∏|KZT|—Ä—É–±|‚ÇΩ)?", text, re.IGNORECASE)
    if sum_match:
        data["–°—É–º–º–∞"] = sum_match.group(1).replace(" ", "")
        data["–í–∞–ª—é—Ç–∞"] = sum_match.group(2) if sum_match.group(2) else "‚Ç∏"

    # –§–ò–û
    fio_match = re.search(r"(?:–§–ò–û|–ò–º—è)\s*[:\-]?\s*([–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.)", text)
    if fio_match:
        data["–§–ò–û"] = fio_match.group(1)

    return data

# ------------------------------
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
# ------------------------------
st.title("üìÑ OCR 2.0 –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç", type=["jpg", "png", "jpeg"])

use_llm = st.checkbox("ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ai –¥–ª—è –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∏", value=True)

if uploaded_file is not None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open("temp.jpg", "wb") as f:
        f.write(uploaded_file.getbuffer())

    # –®–∞–≥ 1: OCR
    raw_text = extract_text("temp.jpg")
    st.subheader("üìú –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (OCR):")
    st.write(raw_text)

    # –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON
    if use_llm:
        st.subheader("üìÇ JSON (GPT):")
        json_result = llm_postprocess(raw_text)
        st.code(json_result, language="json")
    else:
        st.subheader("üìÇ JSON (–ø—Ä–∞–≤–∏–ª–∞):")
        fields = simple_extract_fields(raw_text)
        st.json(fields)
